// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("MONGODB_URI")
}

model User {
  id           String          @id @default(auto()) @map("_id") @db.ObjectId
  username     String          @unique
  email        String          @unique
  passwordHash String
  avatarUrl    String?
  role         String          @default("user") // "admin" | "user"
  phoneNumber  String? // 手机号
  studentId    String?         @unique // 学号
  realName     String? // 真实姓名
  education    EducationLevel? // 学历
  createdAt    DateTime        @default(now())
  updatedAt    DateTime        @updatedAt

  // Relations
  teamMemberships     TeamMembership[]
  submissions         Submission[]
  createdCompetitions Competition[]    @relation("CompetitionCreator")
  sentInvitations     Invitation[]     @relation("Inviter")
  receivedInvitations Invitation[]     @relation("Invitee")

  @@map("users")
}

model Team {
  id              String   @id @default(auto()) @map("_id") @db.ObjectId
  name            String
  description     String?
  avatarUrl       String?
  isLocked        Boolean  @default(false)
  participatingIn String[] @db.ObjectId
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  // Relations
  members            TeamMembership[]
  submissions        Submission[]
  leaderboardEntries LeaderboardEntry[]
  invitations        Invitation[]

  @@map("teams")
}

model TeamMembership {
  id       String   @id @default(auto()) @map("_id") @db.ObjectId
  teamId   String   @db.ObjectId
  userId   String   @db.ObjectId
  role     String   @default("MEMBER") // "CREATOR" | "MEMBER"
  joinedAt DateTime @default(now())

  // Relations
  team Team @relation(fields: [teamId], references: [id], onDelete: Cascade)
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([teamId, userId])
  @@map("team_memberships")
}

model Competition {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  title       String
  description String
  rules       String
  bannerUrl   String?
  startTime   DateTime
  endTime     DateTime
  createdBy   String   @db.ObjectId
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  creator      User          @relation("CompetitionCreator", fields: [createdBy], references: [id])
  problems     Problem[]
  submissions  Submission[]
  leaderboards Leaderboard[]

  @@map("competitions")
}

model Problem {
  id                  String   @id @default(auto()) @map("_id") @db.ObjectId
  title               String
  shortDescription    String
  detailedDescription String
  competitionId       String   @db.ObjectId
  datasetUrl          String?
  judgingScriptUrl    String?
  startTime           DateTime
  endTime             DateTime
  createdAt           DateTime @default(now())
  updatedAt           DateTime @updatedAt
  // 题目分值，表示完成该题目可获得的分数
  score               Int?

  // Relations
  competition Competition  @relation(fields: [competitionId], references: [id], onDelete: Cascade)
  submissions Submission[]

  @@map("problems")
}

enum SubmissionStatus {
  PENDING
  JUDGING
  COMPLETED
  ERROR
}

model Submission {
  id            String           @id @default(auto()) @map("_id") @db.ObjectId
  problemId     String           @db.ObjectId
  competitionId String           @db.ObjectId
  teamId        String           @db.ObjectId
  userId        String           @db.ObjectId
  submissionUrl String
  status        SubmissionStatus @default(PENDING)
  score         Float?
  executionLogs String?
  submittedAt   DateTime         @default(now())
  judgedAt      DateTime?
  updatedAt     DateTime         @updatedAt

  // Relations
  problem     Problem     @relation(fields: [problemId], references: [id], onDelete: Cascade)
  competition Competition @relation(fields: [competitionId], references: [id], onDelete: Cascade)
  team        Team        @relation(fields: [teamId], references: [id], onDelete: Cascade)
  user        User        @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("submissions")
}

model Leaderboard {
  id            String             @id @default(auto()) @map("_id") @db.ObjectId
  competitionId String             @unique @db.ObjectId
  lastUpdated   DateTime           @default(now())
  rankings      LeaderboardEntry[]

  // Relations
  competition Competition @relation(fields: [competitionId], references: [id], onDelete: Cascade)

  @@map("leaderboards")
}

type ProblemScore {
  problemId   String   @db.ObjectId
  score       Float
  submittedAt DateTime
}

model LeaderboardEntry {
  id            String         @id @default(auto()) @map("_id") @db.ObjectId
  leaderboardId String         @db.ObjectId
  rank          Int
  teamId        String         @db.ObjectId
  totalScore    Float
  problemScores ProblemScore[]

  // Relations
  leaderboard Leaderboard @relation(fields: [leaderboardId], references: [id], onDelete: Cascade)
  team        Team        @relation(fields: [teamId], references: [id], onDelete: Cascade)

  @@unique([leaderboardId, teamId])
  @@map("leaderboard_entries")
}

enum InvitationStatus {
  PENDING
  ACCEPTED
  REJECTED
}

enum EducationLevel {
  BACHELOR // 本科
  MASTER // 硕士
  DOCTORATE // 博士
}

model Invitation {
  id          String           @id @default(auto()) @map("_id") @db.ObjectId
  teamId      String           @db.ObjectId
  invitedById String           @db.ObjectId
  inviteeId   String           @db.ObjectId
  status      InvitationStatus @default(PENDING)
  createdAt   DateTime         @default(now())
  updatedAt   DateTime         @updatedAt

  // Relations
  team      Team @relation(fields: [teamId], references: [id])
  invitedBy User @relation("Inviter", fields: [invitedById], references: [id])
  invitee   User @relation("Invitee", fields: [inviteeId], references: [id])

  @@map("invitations")
}

model Announcement {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  title     String
  content   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  status    String   @default("HIDDEN")

  @@map("announcements")
}
